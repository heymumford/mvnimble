#!/usr/bin/env bash
# MVNimble - Maven test optimization utility
# Main entry point script

# Ensure script fails on error
set -e

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# Get the parent directory (project root)
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
# Library path
LIB_DIR="${PROJECT_ROOT}/lib"

# Source required libraries
source "${LIB_DIR}/constants.sh"
source "${LIB_DIR}/common.sh"
source "${LIB_DIR}/environment.sh"
source "${LIB_DIR}/monitor.sh"
source "${LIB_DIR}/analyze.sh"
source "${LIB_DIR}/report.sh"

# Print version information
function print_version() {
  echo "MVNimble v${MVNIMBLE_VERSION}"
  echo "Copyright (C) 2025 Eric C. Mumford (@heymumford)"
}

# Print help menu
function print_help() {
  echo "Usage: mvnimble [command] [options]"
  echo ""
  echo "A utility for Maven test optimization and build analysis"
  echo ""
  echo "Commands:"
  echo "  monitor    Monitor a Maven build in real-time"
  echo "  analyze    Analyze test results and suggest optimizations"
  echo "  report     Generate reports from collected data"
  echo "  verify     Verify your environment and installation"
  echo ""
  echo "Options:"
  echo "  -h, --help     Show this help message"
  echo "  -v, --version  Show version information"
  echo ""
  echo "For more information on a specific command, use: mvnimble [command] --help"
}

# Verify environment and installation
function verify_environment() {
  print_header "Verifying MVNimble Environment"
  
  # Check for required tools
  local missing_tools=false
  
  # Check for Maven
  if ! command -v mvn &> /dev/null; then
    print_error "Maven (mvn) not found in PATH"
    missing_tools=true
  else
    print_success "Maven found: $(mvn --version | head -n 1)"
  fi
  
  # Check for required shell utilities
  for util in awk sed grep cut tr; do
    if ! command -v "$util" &> /dev/null; then
      print_error "$util not found in PATH"
      missing_tools=true
    else
      print_success "$util found: $(command -v "$util")"
    fi
  done
  
  # Detect and display environment information
  detect_environment
  print_env_summary
  
  if [ "$missing_tools" = true ]; then
    print_error "Some required tools are missing. Please install them and try again."
    return 1
  else
    print_success "Environment check passed. MVNimble is ready to use."
    return 0
  fi
}

# Main command router
function main() {
  # Check for empty arguments
  if [ $# -eq 0 ]; then
    print_help
    exit 0
  fi

  # Process the command
  case "$1" in
    monitor)
      shift
      if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        echo "Usage: mvnimble monitor [options] -- [maven command]"
        echo ""
        echo "Monitor Maven builds in real-time to identify bottlenecks and issues"
        echo ""
        echo "Options:"
        echo "  -o, --output DIR    Specify output directory for monitoring data"
        echo "  -i, --interval SEC  Set data collection interval in seconds (default: 5)"
        echo "  -m, --max-time MIN  Maximum monitoring time in minutes (default: 60)"
        echo ""
        echo "Example:"
        echo "  mvnimble monitor -o ./results -- mvn clean test"
      else
        # Find the -- separator
        local maven_cmd_idx=0
        for i in $(seq 1 $#); do
          if [ "${!i}" = "--" ]; then
            maven_cmd_idx=$i
            break
          fi
        done
        
        if [ $maven_cmd_idx -eq 0 ]; then
          print_error "Missing Maven command. Use -- to separate MVNimble options from Maven command."
          echo "Example: mvnimble monitor -o ./results -- mvn clean test"
          exit 1
        fi
        
        # Parse MVNimble options
        local output_dir="./mvnimble-results"
        local interval=5
        local max_time=60
        
        while [ "$1" != "--" ]; do
          case "$1" in
            -o|--output)
              output_dir="$2"
              shift 2
              ;;
            -i|--interval)
              interval="$2"
              shift 2
              ;;
            -m|--max-time)
              max_time="$2"
              shift 2
              ;;
            *)
              print_error "Unknown option: $1"
              exit 1
              ;;
          esac
        done
        
        # Skip the -- separator
        shift
        
        # Now $@ contains the Maven command
        if [ $# -eq 0 ]; then
          print_error "No Maven command specified after --"
          exit 1
        fi
        
        # Convert max_time from minutes to seconds for the monitor function
        local max_seconds=$((max_time * 60))
        
        # Create output directory if it doesn't exist
        mkdir -p "$output_dir"
        
        # Start monitoring
        monitor_maven_build "$output_dir" "$interval" "$max_seconds" "$@"
      fi
      ;;
      
    analyze)
      shift
      if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        echo "Usage: mvnimble analyze [options]"
        echo ""
        echo "Analyze Maven build data and suggest optimizations"
        echo ""
        echo "Options:"
        echo "  -i, --input DIR     Specify input directory with monitoring data"
        echo "  -o, --output FILE   Specify output file for analysis results"
        echo "  -f, --format FMT    Output format: markdown, html, json (default: markdown)"
        echo "  -p, --pom FILE      Path to pom.xml file for configuration analysis"
        echo ""
        echo "Example:"
        echo "  mvnimble analyze -i ./results -o ./analysis.md -f markdown"
      else
        # Parse options
        local input_dir=""
        local output_file="mvnimble-analysis.md"
        local format="markdown"
        local pom_file="pom.xml"
        
        while [ $# -gt 0 ]; do
          case "$1" in
            -i|--input)
              input_dir="$2"
              shift 2
              ;;
            -o|--output)
              output_file="$2"
              shift 2
              ;;
            -f|--format)
              format="$2"
              shift 2
              ;;
            -p|--pom)
              pom_file="$2"
              shift 2
              ;;
            *)
              print_error "Unknown option: $1"
              exit 1
              ;;
          esac
        done
        
        if [ -z "$input_dir" ]; then
          print_error "Input directory (-i, --input) is required"
          exit 1
        fi
        
        # Analyze build data
        analyze_build_data "$input_dir" "$output_file" "$format" "$pom_file"
      fi
      ;;
      
    report)
      shift
      if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        echo "Usage: mvnimble report [options]"
        echo ""
        echo "Generate reports from collected monitoring data"
        echo ""
        echo "Options:"
        echo "  -i, --input FILE    Input JSON file with monitoring data"
        echo "  -o, --output FILE   Output file for the report"
        echo "  -f, --format FMT    Output format: markdown, html, json (default: markdown)"
        echo ""
        echo "Example:"
        echo "  mvnimble report -i ./results/data.json -o ./report.html -f html"
      else
        # Parse options
        local input_file=""
        local output_file=""
        local format="markdown"
        
        while [ $# -gt 0 ]; do
          case "$1" in
            -i|--input)
              input_file="$2"
              shift 2
              ;;
            -o|--output)
              output_file="$2"
              shift 2
              ;;
            -f|--format)
              format="$2"
              shift 2
              ;;
            *)
              print_error "Unknown option: $1"
              exit 1
              ;;
          esac
        done
        
        if [ -z "$input_file" ]; then
          print_error "Input file (-i, --input) is required"
          exit 1
        fi
        
        if [ -z "$output_file" ]; then
          print_error "Output file (-o, --output) is required"
          exit 1
        fi
        
        # Generate report
        generate_report "$input_file" "$output_file" "$format"
      fi
      ;;
      
    verify)
      shift
      verify_environment
      ;;
      
    -h|--help)
      print_help
      ;;
      
    -v|--version)
      print_version
      ;;
      
    *)
      print_error "Unknown command: $1"
      print_help
      exit 1
      ;;
  esac
}

# Execute main function
main "$@"
