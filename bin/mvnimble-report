#!/usr/bin/env bash
# MVNimble - Maven test optimization utility
# Report generation script

# Ensure script fails on error
set -e

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# Get the parent directory (project root)
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
# Library path
LIB_DIR="${PROJECT_ROOT}/lib"

# Source required libraries
source "${LIB_DIR}/constants.sh"
source "${LIB_DIR}/common.sh"
source "${LIB_DIR}/environment.sh"
source "${LIB_DIR}/monitor.sh"
source "${LIB_DIR}/analyze.sh"
source "${LIB_DIR}/report.sh"

# Print version information
function print_version() {
  echo "MVNimble v${MVNIMBLE_VERSION}"
  echo "Copyright (C) 2025 Eric C. Mumford (@heymumford)"
}

# Print help menu
function print_help() {
  echo "Usage: mvnimble-report [options]"
  echo ""
  echo "Generate reports from MVNimble's collected data"
  echo ""
  echo "Options:"
  echo "  -i, --input FILE    Input JSON file with monitoring data"
  echo "  -o, --output FILE   Output file for the report"
  echo "  -f, --format FMT    Output format: markdown, html, json (default: markdown)"
  echo "  -h, --help          Show this help message"
  echo "  -v, --version       Show version information"
  echo ""
  echo "Examples:"
  echo "  mvnimble-report -i ./results/data.json -o ./report.html -f html"
  echo "  mvnimble-report -i ./results/data.json -o ./report.md -f markdown"
}

# Verify environment and installation
function verify_environment() {
  print_header "Verifying MVNimble Environment"
  
  # Check for required tools
  local missing_tools=false
  
  # Check for Maven
  if ! command -v mvn &> /dev/null; then
    print_error "Maven (mvn) not found in PATH"
    missing_tools=true
  else
    print_success "Maven found: $(mvn --version | head -n 1)"
  fi
  
  # Check for required shell utilities
  for util in awk sed grep cut tr; do
    if ! command -v "$util" &> /dev/null; then
      print_error "$util not found in PATH"
      missing_tools=true
    else
      print_success "$util found: $(command -v "$util")"
    fi
  done
  
  # Detect and display environment information
  detect_environment
  print_env_summary
  
  if [ "$missing_tools" = true ]; then
    print_error "Some required tools are missing. Please install them and try again."
    return 1
  else
    print_success "Environment check passed. MVNimble is ready to use."
    return 0
  fi
}

# Main command router
function main() {
  # Check for empty arguments
  if [ $# -eq 0 ]; then
    print_help
    exit 0
  fi

  # Process the command
  case "$1" in
    -h|--help)
      print_help
      ;;
      
    -v|--version)
      print_version
      ;;
      
    *)
      # Parse options for report
      local input_file=""
      local output_file=""
      local format="markdown"
      
      while [ $# -gt 0 ]; do
        case "$1" in
          -i|--input)
            input_file="$2"
            shift 2
            ;;
          -o|--output)
            output_file="$2"
            shift 2
            ;;
          -f|--format)
            format="$2"
            shift 2
            ;;
          *)
            print_error "Unknown option: $1"
            print_help
            exit 1
            ;;
        esac
      done
      
      if [ -z "$input_file" ]; then
        print_error "Input file (-i, --input) is required"
        print_help
        exit 1
      fi
      
      if [ -z "$output_file" ]; then
        print_error "Output file (-o, --output) is required"
        print_help
        exit 1
      fi
      
      # Generate report
      generate_report "$input_file" "$output_file" "$format"
      ;;
  esac
}

# Execute main function
main "$@"
