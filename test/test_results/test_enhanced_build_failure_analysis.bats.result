status: 1
passed: 0
0
failed: 0
0
skipped: 0
0
duration: 1.428362000
[34;1mtest_enhanced_build_failure_analysis.bats
[0m
bats-assert load stub called
bats-assert load stub called
[1G   categorize_build_errors provides detailed error categories[K[77G1/8[2G[31;1m[1G âœ— categorize_build_errors provides detailed error categories[K
[0m[31;22m   (from function `assert_success' in file test/bats/unit/test_enhanced_build_failure_analysis.bats, line 18,
[0m[31;22m    in test file test/bats/unit/test_enhanced_build_failure_analysis.bats, line 77)
[0m[31;22m     `assert_success' failed
[0m[31;22m   Expected success (status 0), got status: 127
[0mbats-assert load stub called
[1G   detect_build_phase identifies Maven build phases[K[77G2/8[2G[31;1m[1G âœ— detect_build_phase identifies Maven build phases[K
[0m[31;22m   (from function `assert_success' in file test/bats/unit/test_enhanced_build_failure_analysis.bats, line 18,
[0m[31;22m    in test file test/bats/unit/test_enhanced_build_failure_analysis.bats, line 125)
[0m[31;22m     `assert_success' failed
[0m[31;22m   Expected success (status 0), got status: 127
[0mbats-assert load stub called
[1G   generate_enhanced_build_recommendations provides actionable suggestions[K[77G3/8[2G[31;1m[1G âœ— generate_enhanced_build_recommendations provides actionable suggestions[K
[0m[31;22m   (from function `assert_output' in file test/bats/unit/../helpers/bats-assert/load.bash, line 11,
[0m[31;22m    in test file test/bats/unit/test_enhanced_build_failure_analysis.bats, line 172)
[0m[31;22m     `assert_output --partial "## Dependency Recommendations"' failed
[0m[31;22m   Expected '## Dependency Recommendations' to be in output: # Build Optimization Recommendations
[0m[31;22m   Generated: 2025-05-04 11:50:02
[0m[31;22m   
[0m[31;22m   ## Project Overview
[0m[31;22m   
[0m[31;22m   * **Project**: Unknown Project
[0m[31;22m   * **Total Build Time**: unknowns
[0m[31;22m   * **Tests Executed**: 15
[0m[31;22m   * **Test Execution Time**: s
[0m[31;22m   * **Maven Parallelism**: default (1 thread)
[0m[31;22m   * **Test Forks**: default (1 fork)
[0m[31;22m   
[0m[31;22m   ## Resource Utilization
[0m[31;22m   
[0m[31;22m   * **Peak CPU Usage**: 85.2%
[0m[31;22m   * **Average CPU Usage**: 44.15%
[0m[31;22m   * **Peak Memory Usage**: 7168MB
[0m[31;22m   * **Average Memory Usage**: 3200MB
[0m[31;22m   
[0m[31;22m   ## General Build Optimizations
[0m[31;22m   
[0m[31;22m   * **Use Maven Build Cache**: Enable the Maven build cache to speed up successive builds
[0m[31;22m   * **Enable Incremental Compilation**: Use compiler plugin with incremental compilation
[0m[31;22m   * **Skip Tests When Appropriate**: Use -DskipTests or -Dmaven.test.skip=true for quick builds
[0m[31;22m   
[0m[31;22m   ## Parallelism Optimizations
[0m[31;22m   
[0m[31;22m   * **Current Parallelism**: Your build is using a balanced amount of CPU resources
[0m[31;22m   
[0m[31;22m   ## Memory Optimizations
[0m[31;22m   
[0m[31;22m   * **Memory Errors Detected**: Increase Java heap size with MAVEN_OPTS="-Xmx4g"
[0m[31;22m   * **Reduce Test Memory Usage**: Configure surefire with -DforkCount=1 -DreuseForks=true
[0m[31;22m   
[0m[31;22m   ## Dependency Management
[0m[31;22m   
[0m[31;22m   * **Dependency Issues Detected**: Ensure all dependencies are correctly declared
[0m[31;22m   * **Dependency Analysis**: Run 'mvn dependency:analyze' to find undeclared dependencies
[0m[31;22m   * **Dependency Tree**: Run 'mvn dependency:tree' to visualize your dependency hierarchy
[0m[31;22m   
[0m[31;22m   ## Maven Configuration Examples
[0m[31;22m   
[0m[31;22m   ### Speed up builds with parallel execution:
[0m[31;22m   ```
[0m[31;22m   # Run with 2x CPU cores
[0m[31;22m   mvn -T 2C clean install
[0m[31;22m   
[0m[31;22m   # Run with 4 threads
[0m[31;22m   mvn -T 4 clean install
[0m[31;22m   ```
[0m[31;22m   
[0m[31;22m   ### Configure JVM memory:
[0m[31;22m   ```
[0m[31;22m   # Set Maven memory options
[0m[31;22m   export MAVEN_OPTS="-Xmx4g -Xms1g"
[0m[31;22m   mvn clean install
[0m[31;22m   
[0m[31;22m   # Configure test execution memory
[0m[31;22m   mvn clean test -DargLine="-Xmx2g -Xms1g"
[0m[31;22m   ```
[0m[31;22m   
[0m[31;22m   ### Optimize test execution:
[0m[31;22m   ```
[0m[31;22m   # Run tests with controlled parallelism
[0m[31;22m   mvn clean test -DforkCount=2 -DreuseForks=true
[0m[31;22m   
[0m[31;22m   # Skip tests for faster builds during development
[0m[31;22m   mvn clean install -DskipTests
[0m[31;22m   
[0m[31;22m   # Run specific tests only
[0m[31;22m   mvn test -Dtest=YourTestClass
[0m[31;22m   ```
[0m[31;22m   
[0m[31;22m   ---
[0m[31;22m   Report generated by MVNimble Test Engineering Tricorder
[0mbats-assert load stub called
[1G   correlate_errors_with_phases links errors to build phases[K[77G4/8[2G[31;1m[1G âœ— correlate_errors_with_phases links errors to build phases[K
[0m[31;22m   (from function `assert_success' in file test/bats/unit/test_enhanced_build_failure_analysis.bats, line 18,
[0m[31;22m    in test file test/bats/unit/test_enhanced_build_failure_analysis.bats, line 204)
[0m[31;22m     `assert_success' failed
[0m[31;22m   Expected success (status 0), got status: 127
[0mbats-assert load stub called
[1G   enhanced_build_failure_analysis generates comprehensive report[K[77G5/8[2G[31;1m[1G âœ— enhanced_build_failure_analysis generates comprehensive report[K
[0m[31;22m   (from function `assert_output' in file test/bats/unit/../helpers/bats-assert/load.bash, line 11,
[0m[31;22m    in test file test/bats/unit/test_enhanced_build_failure_analysis.bats, line 253)
[0m[31;22m     `assert_output --partial "## Error Categories"' failed
[0m[31;22m   Expected '## Error Categories' to be in output: # Build Failure Analysis Report
[0m[31;22m   Generated: 2025-05-04 11:50:02
[0m[31;22m   
[0m[31;22m   ## Overview
[0m[31;22m   
[0m[31;22m   * **Project**: Unknown Project
[0m[31;22m   * **Build Time**: 2025-05-04 11:50:02
[0m[31;22m   * **Error Count**: 5
[0m[31;22m   * **Warning Count**: 0
[0m[31;22m   0
[0m[31;22m   * **Primary Failure Reason**: Dependency Resolution Issues
[0m[31;22m   * **Failed Phase**: unknown
[0m[31;22m   
[0m[31;22m   ## Error Breakdown
[0m[31;22m   
[0m[31;22m   * **Compilation Errors**: 0
[0m[31;22m   0
[0m[31;22m   * **Dependency Issues**: 1
[0m[31;22m   * **Test Failures**:
[0m[31;22m   * **Test Errors**:
[0m[31;22m   * **Plugin Errors**: 0
[0m[31;22m   0
[0m[31;22m   * **Memory Issues**: 1
[0m[31;22m   
[0m[31;22m   ## Dependency Issues
[0m[31;22m   
[0m[31;22m   ```
[0m[31;22m   [INFO]
[0m[31;22m   [INFO] --- compiler:3.14.0:compile (default-compile) @ CheckvoxApp ---
[0m[31;22m   [ERROR] /project/src/main/java/com/example/App.java:[15,34] package org.example.missing does not exist
[0m[31;22m   [ERROR] /project/src/main/java/com/example/Utils.java:[22,45] cannot find symbol: class TestClass
[0m[31;22m   [INFO]
[0m[31;22m   ```
[0m[31;22m   
[0m[31;22m   ## Resource Utilization
[0m[31;22m   
[0m[31;22m   * **Peak CPU Usage**: 75.8%
[0m[31;22m   * **Peak Memory Usage**: 6144MB
[0m[31;22m   * **Total System Memory**: 65536MB
[0m[31;22m   
[0m[31;22m   ## Recommendations
[0m[31;22m   
[0m[31;22m   * Check your project's dependencies and ensure all required libraries are in your pom.xml
[0m[31;22m   * Verify dependency versions are compatible with your project
[0m[31;22m   * Run 'mvn dependency:tree' to analyze the dependency hierarchy
[0m[31;22m   * Consider adding explicit dependencies for transitively imported packages
[0m[31;22m   * Increase Java heap size with MAVEN_OPTS="-Xmx4g"
[0m[31;22m   * Reduce parallelism with -DforkCount=1 -DreuseForks=true
[0m[31;22m   * Consider splitting large test suites into smaller runs
[0m[31;22m   
[0m[31;22m   ## Next Steps
[0m[31;22m   
[0m[31;22m   1. Address the primary failure reason: Dependency Resolution Issues
[0m[31;22m   2. Fix errors in sequence, starting with compilation and dependency issues
[0m[31;22m   3. Run the build with more detailed logging for troubleshooting: 'mvn -X clean install'
[0m[31;22m   4. Consider running with Maven Batch Mode for cleaner output: 'mvn -B clean install'
[0m[31;22m   
[0m[31;22m   ---
[0m[31;22m   Report generated by MVNimble Test Engineering Tricorder
[0m[31;22m   
[0m[31;22m   ## Enhanced Analysis
[0m[31;22m   
[0m[31;22m   This section contains advanced diagnostic information based on additional metrics and patterns.
[0m[31;22m   
[0m[31;22m   ### Time-Based Correlation Analysis
[0m[31;22m   
[0m[31;22m   Examining temporal patterns in resource utilization and failure events:
[0m[31;22m   
[0m[31;22m   * No clear temporal failure patterns detected
[0m[31;22m   
[0m[31;22m   ### Dependency Conflict Analysis
[0m[31;22m   
[0m[31;22m   Detecting potential library version conflicts and dependency resolution issues:
[0m[31;22m   
[0m[31;22m   * No explicit dependency conflicts detected
[0m[31;22m   
[0m[31;22m   ### Future Investigation Suggestions
[0m[31;22m   
[0m[31;22m   Based on this failure analysis, consider investigating:
[0m[31;22m   
[0m[31;22m   * Test flakiness patterns with repeated test runs
[0m[31;22m   * External dependency stability with connection monitoring
[0m[31;22m   * Resource usage optimization opportunities
[0m[31;22m   * Configuration parameter fine-tuning
[0mbats-assert load stub called
[1G   detect_memory_issues identifies memory-related problems[K[77G6/8[2G[31;1m[1G âœ— detect_memory_issues identifies memory-related problems[K
[0m[31;22m   (from function `assert_success' in file test/bats/unit/test_enhanced_build_failure_analysis.bats, line 18,
[0m[31;22m    in test file test/bats/unit/test_enhanced_build_failure_analysis.bats, line 282)
[0m[31;22m     `assert_success' failed
[0m[31;22m   Expected success (status 0), got status: 127
[0mbats-assert load stub called
[1G   analyze_dependency_issues extracts missing dependencies[K[77G7/8[2G[31;1m[1G âœ— analyze_dependency_issues extracts missing dependencies[K
[0m[31;22m   (from function `assert_success' in file test/bats/unit/test_enhanced_build_failure_analysis.bats, line 18,
[0m[31;22m    in test file test/bats/unit/test_enhanced_build_failure_analysis.bats, line 311)
[0m[31;22m     `assert_success' failed
[0m[31;22m   Expected success (status 0), got status: 127
[0mbats-assert load stub called
[1G   complete build failure analysis workflow works end-to-end[K[77G8/8[2G[1G âœ“ complete build failure analysis workflow works end-to-end[K
[0m[31;1m
8 tests, 7 failures
[0m

The following warnings were encountered during tests:
[31mBW01: `run`'s command `categorize_build_errors /var/folders/3b/c4p1r6sj1vd9y689wrpkrnhh0000gn/T/bats-run-116cgH/test/1/build.log` exited with code 127, indicating 'Command not found'. Use run's return code checks, e.g. `run -127`, to fix this message.
      (from function `run' in file /Users/vorthruna/.local/lib/bats-core/test_functions.bash, line 418,
       in test file test/bats/unit/test_enhanced_build_failure_analysis.bats, line 76)
BW01: `run`'s command `detect_build_phase /var/folders/3b/c4p1r6sj1vd9y689wrpkrnhh0000gn/T/bats-run-116cgH/test/2/build.log` exited with code 127, indicating 'Command not found'. Use run's return code checks, e.g. `run -127`, to fix this message.
      (from function `run' in file /Users/vorthruna/.local/lib/bats-core/test_functions.bash, line 418,
       in test file test/bats/unit/test_enhanced_build_failure_analysis.bats, line 124)
BW01: `run`'s command `correlate_errors_with_phases /var/folders/3b/c4p1r6sj1vd9y689wrpkrnhh0000gn/T/bats-run-116cgH/test/4/build.log` exited with code 127, indicating 'Command not found'. Use run's return code checks, e.g. `run -127`, to fix this message.
      (from function `run' in file /Users/vorthruna/.local/lib/bats-core/test_functions.bash, line 418,
       in test file test/bats/unit/test_enhanced_build_failure_analysis.bats, line 203)
BW01: `run`'s command `detect_memory_issues /var/folders/3b/c4p1r6sj1vd9y689wrpkrnhh0000gn/T/bats-run-116cgH/test/6/build.log` exited with code 127, indicating 'Command not found'. Use run's return code checks, e.g. `run -127`, to fix this message.
      (from function `run' in file /Users/vorthruna/.local/lib/bats-core/test_functions.bash, line 418,
       in test file test/bats/unit/test_enhanced_build_failure_analysis.bats, line 281)
BW01: `run`'s command `analyze_dependency_issues /var/folders/3b/c4p1r6sj1vd9y689wrpkrnhh0000gn/T/bats-run-116cgH/test/7/build.log` exited with code 127, indicating 'Command not found'. Use run's return code checks, e.g. `run -127`, to fix this message.
      (from function `run' in file /Users/vorthruna/.local/lib/bats-core/test_functions.bash, line 418,
       in test file test/bats/unit/test_enhanced_build_failure_analysis.bats, line 310)
[0m