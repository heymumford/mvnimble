#!/usr/bin/env bash
# mvnimble-thread-viz - Command line tool for thread visualization
#
# This tool visualizes thread dumps to help diagnose thread safety issues
# in flaky tests. It can generate diagrams, timelines, and HTML reports.
#
# Usage:
#   mvnimble-thread-viz [command] [options]

# Exit on error
set -e

# Determine the script's location
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ROOT_DIR="$(cd "${SCRIPT_DIR}/.." && pwd)"

# Source required libraries
if [[ -f "${ROOT_DIR}/src/lib/modules/constants.sh" ]]; then
  source "${ROOT_DIR}/src/lib/modules/constants.sh"
fi

if [[ -f "${ROOT_DIR}/src/lib/modules/common.sh" ]]; then
  source "${ROOT_DIR}/src/lib/modules/common.sh"
else
  # Fallback minimal implementations
  function print_info() { echo -e "\033[0;34m$1\033[0m"; }
  function print_success() { echo -e "\033[0;32m$1\033[0m"; }
  function print_warning() { echo -e "\033[0;33m$1\033[0m"; }
  function print_error() { echo -e "\033[0;31m$1\033[0m" >&2; }
  function ensure_directory() { mkdir -p "$1"; }
fi

# Source the thread visualizer module
THREAD_VISUALIZER_MODULE="${ROOT_DIR}/src/lib/modules/thread_visualizer.sh"
if [[ -f "$THREAD_VISUALIZER_MODULE" ]]; then
  source "$THREAD_VISUALIZER_MODULE"
else
  print_error "Thread visualizer module not found at: $THREAD_VISUALIZER_MODULE"
  exit 1
fi

# Display help message
show_help() {
  echo "MVNimble Thread Visualizer"
  echo ""
  echo "Visualize thread dumps to diagnose concurrency and thread safety issues in Maven builds."
  echo ""
  echo "Usage:"
  echo "  mvnimble-thread-viz <command> [options]"
  echo ""
  echo "Commands:"
  echo "  diagram <input_file> <output_file>     Generate a thread interaction diagram (Mermaid format)"
  echo "  timeline <input_file> <output_file>    Generate a thread timeline visualization (Mermaid format)"
  echo "  contention <input_file> <output_file>  Generate a lock contention graph (Mermaid format)"
  echo "  visualize <input_file> <output_file>   Generate a complete HTML visualization with all diagrams"
  echo "  analyze <input_file>                   Analyze a thread dump for issues (printed to stdout)"
  echo "  detect-deadlocks <input_file>          Check for deadlocks in a thread dump"
  echo ""
  echo "Options:"
  echo "  --help, -h     Show this help message"
  echo "  --version, -v  Show version information"
  echo ""
  echo "Examples:"
  echo "  mvnimble-thread-viz diagram thread_dump.json thread_diagram.md"
  echo "  mvnimble-thread-viz visualize thread_dump.json thread_visualization.html"
  echo "  mvnimble-thread-viz analyze thread_dump.json"
  echo ""
  echo "Thread dumps can be generated from a running JVM using:"
  echo "  jcmd <pid> Thread.print -l > thread_dump.json"
  echo "  jstack -l <pid> > thread_dump.txt"
  echo ""
  echo "For more information, see the MVNimble documentation."
}

# Show version information
show_version() {
  echo "MVNimble Thread Visualizer v1.0.0"
  echo "Part of the MVNimble Maven Build Analysis and Optimization Toolkit"
  echo "Copyright (C) 2025 Eric C. Mumford (@heymumford)"
}

# Check if we have required parameters
if [ $# -lt 1 ]; then
  show_help
  exit 1
fi

# Parse command line arguments
COMMAND="$1"
shift

case "$COMMAND" in
  diagram)
    if [[ $# -lt 2 || "$1" == "--help" || "$1" == "-h" ]]; then
      echo "Usage: mvnimble-thread-viz diagram <input_file> <output_file>"
      echo "Generate a thread interaction diagram in Mermaid format."
      exit 1
    fi
    generate_thread_diagram "$1" "$2"
    ;;
    
  timeline)
    if [[ $# -lt 2 || "$1" == "--help" || "$1" == "-h" ]]; then
      echo "Usage: mvnimble-thread-viz timeline <input_file> <output_file>"
      echo "Generate a thread timeline visualization in Mermaid format."
      exit 1
    fi
    generate_thread_timeline "$1" "$2"
    ;;
    
  contention)
    if [[ $# -lt 2 || "$1" == "--help" || "$1" == "-h" ]]; then
      echo "Usage: mvnimble-thread-viz contention <input_file> <output_file>"
      echo "Generate a lock contention graph in Mermaid format."
      exit 1
    fi
    generate_lock_contention_graph "$1" "$2"
    ;;
    
  visualize)
    if [[ $# -lt 2 || "$1" == "--help" || "$1" == "-h" ]]; then
      echo "Usage: mvnimble-thread-viz visualize <input_file> <output_file>"
      echo "Generate a complete HTML visualization with all diagrams."
      exit 1
    fi
    generate_thread_visualization "$1" "$2"
    ;;
    
  analyze)
    if [[ $# -lt 1 || "$1" == "--help" || "$1" == "-h" ]]; then
      echo "Usage: mvnimble-thread-viz analyze <input_file>"
      echo "Analyze a thread dump for issues (printed to stdout)."
      exit 1
    fi
    analyze_thread_dump "$1"
    ;;
    
  detect-deadlocks)
    if [[ $# -lt 1 || "$1" == "--help" || "$1" == "-h" ]]; then
      echo "Usage: mvnimble-thread-viz detect-deadlocks <input_file>"
      echo "Check for deadlocks in a thread dump."
      exit 1
    fi
    detect_deadlocks "$1"
    ;;
    
  --version|-v)
    show_version
    ;;
    
  --help|-h|help)
    show_help
    ;;
    
  *)
    print_error "Unknown command: $COMMAND"
    echo "Try 'mvnimble-thread-viz --help' for usage information."
    exit 1
    ;;
esac

exit 0