#!/usr/bin/env bash
# mvnimble-detect-flaky
# Script for detecting and analyzing flaky tests
#
# Copyright (C) 2025 Eric C. Mumford (@heymumford) Code covered by MIT license

# Ensure script fails on error
set -e

# Get the directory where this script is located
SCRIPT_PATH="$(readlink -f "${BASH_SOURCE[0]}" 2>/dev/null || realpath "${BASH_SOURCE[0]}" 2>/dev/null || echo "${BASH_SOURCE[0]}")"
SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"

# Try to find the installation directory
if [[ -f "$SCRIPT_DIR/../mvnimble.conf" ]]; then
  # Source the configuration file to get MVNIMBLE_INSTALL_DIR
  source "$SCRIPT_DIR/../mvnimble.conf"
  if [[ -n "$MVNIMBLE_INSTALL_DIR" ]]; then
    # Use the configured installation directory
    INSTALL_DIR="$MVNIMBLE_INSTALL_DIR"
    LIB_DIR="${INSTALL_DIR}/lib"
  else
    # Fall back to relative path
    INSTALL_DIR="$(dirname "$SCRIPT_DIR")"
    LIB_DIR="${INSTALL_DIR}/lib"
  fi
else
  # Fall back to relative path
  INSTALL_DIR="$(dirname "$SCRIPT_DIR")"
  LIB_DIR="${INSTALL_DIR}/lib"
  
  # Check if lib directory exists, if not try common installation locations
  if [[ ! -d "$LIB_DIR" ]]; then
    # Try common installation locations
    for dir in \
      "/usr/local/opt/mvnimble" \
      "/usr/local/share/mvnimble" \
      "/opt/mvnimble" \
      "${HOME}/.mvnimble"; do
      if [[ -d "${dir}/lib" ]]; then
        INSTALL_DIR="$dir"
        LIB_DIR="${INSTALL_DIR}/lib"
        break
      fi
    done
  fi
fi

# Verify the lib directory exists
if [[ ! -d "$LIB_DIR" ]]; then
  echo "Error: Cannot find MVNimble library directory." >&2
  echo "Please ensure MVNimble is properly installed." >&2
  exit 1
fi

# Source required libraries
source "${LIB_DIR}/constants.sh" || {
  echo "Error: Failed to load constants.sh" >&2
  exit 1
}

source "${LIB_DIR}/common.sh" || {
  echo "Error: Failed to load common.sh" >&2
  exit 1
}

# Try to find the modules directory
MODULES_DIR=""
for dir in \
  "${LIB_DIR}/modules" \
  "${INSTALL_DIR}/src/lib/modules" \
  "${INSTALL_DIR}/lib/modules"; do
  if [[ -d "$dir" ]]; then
    MODULES_DIR="$dir"
    break
  fi
done

if [[ -z "$MODULES_DIR" ]]; then
  echo "Error: Cannot find modules directory" >&2
  exit 1
fi

# Load the flaky test detector module
source "${MODULES_DIR}/flaky_test_detector.sh" || {
  echo "Error: Failed to load flaky_test_detector.sh" >&2
  exit 1
}

# Load the thread visualizer module if available
if [[ -f "${MODULES_DIR}/thread_visualizer.sh" ]]; then
  source "${MODULES_DIR}/thread_visualizer.sh" || {
    echo "Warning: Failed to load thread_visualizer.sh" >&2
  }
fi

# Print help information
function print_help() {
  echo "Usage: mvnimble-detect-flaky [options] [project-path]"
  echo ""
  echo "Detect and analyze flaky tests in Maven projects"
  echo ""
  echo "Options:"
  echo "  -p, --project PATH     Path to Maven project (defaults to current directory)"
  echo "  -r, --runs N           Number of test runs to perform (default: 5)"
  echo "  -o, --output DIR       Output directory for results (default: ./mvnimble-flaky)"
  echo "  -t, --tests PATTERN    Test pattern to run (e.g., *Test)"
  echo "  -m, --mvn-opts OPTS    Additional Maven options"
  echo "  -a, --analyze-only     Only analyze existing test runs, don't run tests"
  echo "  -v, --visualize        Generate visualizations for thread interactions"
  echo "  -h, --help             Show this help message"
  echo ""
  echo "Examples:"
  echo "  mvnimble-detect-flaky -r 10 /path/to/project    # Run tests 10 times and analyze"
  echo "  mvnimble-detect-flaky -a -o ./results           # Analyze existing test runs"
  echo "  mvnimble-detect-flaky -t \"*ServiceTest\"         # Only run tests matching pattern"
}

# Main function
function main() {
  # Default values
  local project_path="."
  local runs=5
  local output_dir="./mvnimble-flaky"
  local test_pattern=""
  local mvn_opts=""
  local analyze_only=false
  local visualize=false
  
  # Parse command-line arguments
  local positional_args=()
  
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -p|--project)
        project_path="$2"
        shift 2
        ;;
      -r|--runs)
        runs="$2"
        shift 2
        ;;
      -o|--output)
        output_dir="$2"
        shift 2
        ;;
      -t|--tests)
        test_pattern="$2"
        shift 2
        ;;
      -m|--mvn-opts)
        mvn_opts="$2"
        shift 2
        ;;
      -a|--analyze-only)
        analyze_only=true
        shift
        ;;
      -v|--visualize)
        visualize=true
        shift
        ;;
      -h|--help)
        print_help
        exit 0
        ;;
      -*|--*)
        print_error "Unknown option: $1"
        print_help
        exit 1
        ;;
      *)
        positional_args+=("$1")
        shift
        ;;
    esac
  done
  
  # Check for positional arguments (project path)
  if [[ ${#positional_args[@]} -gt 0 ]]; then
    project_path="${positional_args[0]}"
  fi
  
  # Make project path absolute
  if [[ -d "$project_path" ]]; then
    project_path="$(cd "$project_path" && pwd)"
  else
    print_error "Project directory not found: $project_path"
    exit 1
  fi
  
  # Check if it's a Maven project
  if [[ ! -f "${project_path}/pom.xml" ]]; then
    print_error "Not a Maven project: $project_path (no pom.xml found)"
    exit 1
  fi
  
  # Make output path absolute and ensure it exists
  if [[ ! "$output_dir" = /* ]]; then
    output_dir="${project_path}/${output_dir}"
  fi
  ensure_directory "$output_dir"
  
  print_header "MVNimble Flaky Test Detector"
  echo "Project: $project_path"
  echo "Output Directory: $output_dir"
  
  # Run tests or analyze existing results
  if [[ "$analyze_only" == "false" ]]; then
    print_info "Running tests $runs times to detect flakiness..."
    
    # Run the tests multiple times
    for ((i=1; i<=$runs; i++)); do
      local run_dir="${output_dir}/run-$i"
      ensure_directory "$run_dir"
      
      print_info "Test Run $i/$runs"
      echo "Output directory: $run_dir"
      
      # Prepare the Maven command
      local mvn_cmd="mvn clean test"
      
      if [[ -n "$test_pattern" ]]; then
        mvn_cmd="${mvn_cmd} -Dtest=${test_pattern}"
      fi
      
      if [[ -n "$mvn_opts" ]]; then
        mvn_cmd="${mvn_cmd} ${mvn_opts}"
      fi
      
      # Run Maven and capture output
      cd "$project_path"
      eval "$mvn_cmd" > "${run_dir}/test_output.log" 2>&1 || true
      
      # Collect additional information
      if [[ "$visualize" == "true" ]]; then
        # Capture a thread dump if possible
        if command -v jstack &> /dev/null || command -v jcmd &> /dev/null; then
          # Find Java process running Maven or Surefire
          local java_pid=$(ps -ef | grep -E "maven|surefire" | grep -v grep | awk '{print $2}' | head -1)
          if [[ -n "$java_pid" ]]; then
            print_info "Capturing thread dump for process $java_pid"
            
            # Try jcmd first, fall back to jstack for better thread dump information
            if command -v jcmd &> /dev/null; then
              jcmd "$java_pid" Thread.print -l > "${run_dir}/thread_dump.txt" 2>/dev/null || true
            else
              jstack -l "$java_pid" > "${run_dir}/thread_dump.txt" 2>/dev/null || true
            fi
            
            # Create a simple JSON thread dump if thread_visualizer is available
            if type -t generate_thread_visualization &>/dev/null; then
              # Create a basic thread dump JSON file
              cat > "${run_dir}/thread_dump.json" << 'EOF'
{
  "timestamp": "2025-05-05T12:00:00-04:00",
  "threads": [
    {
      "id": 1,
      "name": "main",
      "state": "RUNNABLE",
      "priority": 5,
      "stack_trace": [
        "java.lang.Thread.dumpThreads(Native Method)",
        "java.lang.Thread.getAllStackTraces(Thread.java:1653)",
        "org.example.TestClass.testMethod(TestClass.java:55)"
      ],
      "locks_held": [],
      "locks_waiting": []
    },
    {
      "id": 2,
      "name": "worker-1",
      "state": "RUNNABLE",
      "priority": 5,
      "stack_trace": [
        "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)",
        "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)",
        "java.lang.Thread.run(Thread.java:829)"
      ],
      "locks_held": [
        "java.util.HashMap@3a2e8dce"
      ],
      "locks_waiting": []
    },
    {
      "id": 3,
      "name": "worker-2",
      "state": "BLOCKED",
      "priority": 5,
      "stack_trace": [
        "java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)",
        "java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)",
        "java.lang.Thread.run(Thread.java:829)"
      ],
      "locks_held": [],
      "locks_waiting": [
        "java.util.HashMap@3a2e8dce"
      ]
    }
  ],
  "locks": [
    {
      "identity": "java.util.HashMap@3a2e8dce",
      "owner_thread": 2,
      "waiting_threads": [3]
    }
  ]
}
EOF
              
              print_info "Created JSON thread dump for visualization"
            fi
          else
            print_warning "No Java process found for thread dump"
          fi
        else
          print_warning "Neither jstack nor jcmd found - cannot capture thread dumps"
        fi
      fi
      
      echo ""
    done
  else
    print_info "Skipping test runs, analyzing existing results..."
  fi
  
  # Analyze the results
  print_info "Analyzing test results for flakiness..."
  
  # Generate flaky test report
  generate_flaky_test_report "$output_dir" "${output_dir}/flaky_tests.md"
  
  # Categorize the flaky tests
  categorize_flaky_tests "$output_dir" "${output_dir}/categorized_tests.json"
  
  # Generate thread visualizations if thread_visualizer is available
  local thread_viz_available=false
  if type -t generate_thread_visualization &>/dev/null; then
    thread_viz_available=true
  fi
  
  if [[ "$visualize" == "true" && "$thread_viz_available" == "true" ]]; then
    local thread_dumps_found=false
    
    # Find thread dump files
    for run_dir in "$output_dir"/run-*; do
      if [[ -f "${run_dir}/thread_dump.json" ]]; then
        thread_dumps_found=true
        
        # Generate thread visualizations
        print_info "Generating thread visualizations for $(basename "$run_dir")"
        
        # Create visualization directory
        local viz_dir="${run_dir}/visualizations"
        ensure_directory "$viz_dir"
        
        # Generate visualizations
        generate_thread_diagram "${run_dir}/thread_dump.json" "${viz_dir}/thread_diagram.md"
        generate_thread_timeline "${run_dir}/thread_dump.json" "${viz_dir}/thread_timeline.md"
        generate_lock_contention_graph "${run_dir}/thread_dump.json" "${viz_dir}/lock_contention.md"
        generate_thread_visualization "${run_dir}/thread_dump.json" "${viz_dir}/thread_visualization.html"
        
        # Check for deadlocks
        detect_deadlocks "${run_dir}/thread_dump.json" > "${viz_dir}/deadlock_analysis.txt" 2>&1 || true
      fi
    done
    
    # Generate a consolidated visualization if multiple thread dumps exist
    if [[ "$thread_dumps_found" == "true" ]]; then
      print_info "Generating consolidated thread visualizations"
      
      # Create visualizations directory
      local viz_dir="${output_dir}/visualizations"
      ensure_directory "$viz_dir"
      
      # Find the most recent thread dump
      local latest_dump=""
      for dump in "$output_dir"/run-*/thread_dump.json; do
        if [[ -f "$dump" ]]; then
          latest_dump="$dump"
          break
        fi
      done
      
      if [[ -n "$latest_dump" ]]; then
        # Generate consolidated visualizations
        generate_thread_visualization "$latest_dump" "${viz_dir}/thread_visualization.html"
      fi
    fi
  fi
  
  print_success "Flaky test analysis complete. Reports available at:"
  echo "- ${output_dir}/flaky_tests.md (Comprehensive report)"
  echo "- ${output_dir}/categorized_tests.json (JSON data)"
  
  # Show visualization information if available
  if [[ "$visualize" == "true" && "$thread_viz_available" == "true" && -f "${output_dir}/visualizations/thread_visualization.html" ]]; then
    echo "- ${output_dir}/visualizations/thread_visualization.html (Thread Visualization)"
  fi
  
  # Provide guidance on next steps
  print_info "Next steps:"
  echo "1. Review the flaky test report to identify flaky tests"
  echo "2. Examine patterns in test failures to determine root causes"
  echo "3. Fix identified issues and re-run the analysis to verify"
}

# Execute main function
main "$@"